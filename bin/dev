#!/usr/bin/env bash
# Ask.Dentist MVP Developer Orchestrator
# Usage: ./bin/dev {command}

set -euo pipefail

# Get project root directory
ROOT=$(cd "$(dirname "$0")/.."; pwd)
cd "$ROOT"

# Utility functions
function step() {
    printf "\n\033[1;36m‚ñ∂ %s\033[0m\n" "$1"
}

function success() {
    printf "\033[1;32m‚úÖ %s\033[0m\n" "$1"
}

function warn() {
    printf "\033[1;33m‚ö†Ô∏è  %s\033[0m\n" "$1"
}

function die() {
    printf "\033[1;31m‚úó %s\033[0m\n" "$1"
    exit 1
}

function info() {
    printf "\033[1;34m‚ÑπÔ∏è  %s\033[0m\n" "$1"
}

# Get LAN IP address
function get_lan_ip() {
    # Try multiple methods to get LAN IP
    local ip=""

    # Method 1: ip route (Linux/macOS with ip command)
    if command -v ip >/dev/null 2>&1; then
        ip=$(ip route get 1.1.1.1 2>/dev/null | awk '{print $7; exit}')
    fi

    # Method 2: route command (macOS)
    if [ -z "$ip" ] && command -v route >/dev/null 2>&1; then
        ip=$(route get 1.1.1.1 2>/dev/null | awk '/interface/ {getline; print $2; exit}')
    fi

    # Method 3: ifconfig fallback
    if [ -z "$ip" ] && command -v ifconfig >/dev/null 2>&1; then
        ip=$(ifconfig 2>/dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | head -n 1)
    fi

    # Method 4: networksetup (macOS)
    if [ -z "$ip" ] && command -v networksetup >/dev/null 2>&1; then
        local service=$(networksetup -listallhardwareports | awk '/Wi-Fi|Ethernet/{getline; print $2; exit}')
        if [ -n "$service" ]; then
            ip=$(networksetup -getinfo "$service" | awk '/IP address/ {print $3}')
        fi
    fi

    echo "$ip"
}

# Print platform-specific API URLs
function print_api_urls() {
    local lan_ip=$(get_lan_ip)

    echo ""
    info "üì± Mobile Development URLs:"
    echo "  Android Emulator:  http://10.0.2.2:8080"
    echo "  iOS Simulator:     http://localhost:8080"
    if [ -n "$lan_ip" ]; then
        echo "  Physical Device:   http://$lan_ip:8080"
        echo ""
        info "üìù For physical devices, update apps/patient/assets/.env.json:"
        echo "  {\"API_BASE_URL\": \"http://$lan_ip:8080\"}"
        echo ""
        info "üîß For Android physical device, also run:"
        echo "  adb reverse tcp:8080 tcp:8080"
        echo "  # Then use http://127.0.0.1:8080 as API_BASE_URL"
    else
        echo "  Physical Device:   [Unable to detect LAN IP]"
    fi
    echo ""
}

# Docker compose wrapper to ensure we're using the right file
function dc() {
    docker compose "$@"
}

# Check if docker is running
function check_docker() {
    if ! docker info >/dev/null 2>&1; then
        die "Docker is not running. Please start Docker Desktop."
    fi
}

# Wait for service to be ready
function wait_for_service() {
    local service=$1
    local max_attempts=${2:-30}
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if dc exec -T "$service" true >/dev/null 2>&1; then
            return 0
        fi
        printf "."
        sleep 1
        ((attempt++))
    done
    return 1
}

# Commands
case "${1:-help}" in
    up)
        check_docker
        step "Starting Ask.Dentist MVP services"
        dc up -d

        step "Waiting for PostgreSQL to be ready"
        scripts/wait-for.sh 127.0.0.1 5432 60 || die "PostgreSQL failed to start"

        step "Waiting for PHP container to be ready"
        if ! wait_for_service "php-fpm" 30; then
            die "PHP container failed to start"
        fi

        step "Running Laravel warmup"
        # Generate app key if not exists
        dc exec -T php-fpm php artisan key:generate --force || warn "Key generation failed (may already exist)"

        # Run migrations
        dc exec -T php-fpm php artisan migrate --force || die "Migration failed"

        # Seed database
        dc exec -T php-fpm php artisan db:seed --force || warn "Seeding failed (may already be seeded)"

        # Install Passport (for API auth)
        dc exec -T php-fpm php artisan passport:install --force || warn "Passport installation failed"

        # Link storage
        dc exec -T php-fpm php artisan storage:link || warn "Storage link failed (may already exist)"

        step "Cache optimization"
        dc exec -T php-fpm php artisan optimize:clear || true
        dc exec -T php-fpm php artisan optimize || true

        success "Ask.Dentist MVP is ready!"
        info "üåê Main site: http://localhost:8080"
        info "üè• Admin panel: http://localhost:8080/admin"
        info "üë©‚Äç‚öïÔ∏è Doctor portal: http://localhost:8080/doctor"
        info "üìß MailHog: http://localhost:8025 (if configured)"

        print_api_urls

        info "Use './bin/dev admin' or './bin/dev doctor' for login credentials"
        ;;

    logs)
        check_docker
        step "Following logs with intelligent error detection"

        # Enhanced log processing with pattern matching and suggestions
        dc logs -f --tail=200 | while IFS= read -r line; do
            # Colorize different log levels
            if echo "$line" | grep -q -E -i "(ERROR|CRITICAL|FATAL|EXCEPTION)"; then
                echo -e "\033[1;31m$line\033[0m"  # Red
            elif echo "$line" | grep -q -E -i "(WARNING|WARN)"; then
                echo -e "\033[1;33m$line\033[0m"  # Yellow
            elif echo "$line" | grep -q -E -i "(INFO|NOTICE)"; then
                echo -e "\033[1;34m$line\033[0m"  # Blue
            else
                echo "$line"  # Default
            fi

            # Pattern matching for suggestions
            if echo "$line" | grep -q "APP_KEY"; then
                echo -e "\033[1;32mHint: docker compose exec php php artisan key:generate\033[0m"
            elif echo "$line" | grep -q -E "(SQLSTATE\[08006\]|Connection refused)"; then
                echo -e "\033[1;32mHint: check DB env, wait-for Postgres, rerun migrate\033[0m"
            elif echo "$line" | grep -q "No application encryption key"; then
                echo -e "\033[1;32mHint: php artisan key:generate\033[0m"
            elif echo "$line" | grep -q -E "Target class .* does not exist"; then
                echo -e "\033[1;32mHint: composer dump-autoload; php artisan optimize:clear\033[0m"
            elif echo "$line" | grep -q -E "(419|CSRF token mismatch)"; then
                echo -e "\033[1;32mHint: clear cookies, check APP_URL\033[0m"
            elif echo "$line" | grep -q "Class 'Redis' not found"; then
                echo -e "\033[1;32mHint: ensure predis installed and redis container up\033[0m"
            fi
        done || {
            warn "No logs available or error occurred. Showing recent logs:"
            dc logs --tail=50
        }
        ;;

    logs-all)
        check_docker
        step "Following all logs (unfiltered)"
        dc logs -f --tail=200
        ;;

    doctor-logs)
        check_docker
        step "Following Laravel application logs"
        dc logs -f php-fpm
        ;;

    smoke)
        check_docker
        step "Running comprehensive smoke tests"
        exec scripts/smoke.sh
        ;;

    admin)
        info "üìã Admin Credentials:"
        echo "  Email: admin@ask.dentist"
        echo "  Password: password"
        echo ""
        info "üåê Opening admin panel..."
        open "http://localhost:8080/admin" 2>/dev/null || echo "Open manually: http://localhost:8080/admin"
        ;;

    doctor)
        info "üë©‚Äç‚öïÔ∏è Doctor Credentials:"
        echo "  Email: dr@ask.dentist"
        echo "  Password: password"
        echo ""
        info "üåê Opening doctor portal..."
        open "http://localhost:8080/doctor" 2>/dev/null || echo "Open manually: http://localhost:8080/doctor"
        ;;

    shell)
        check_docker
        step "Opening PHP container shell"
        dc exec php-fpm bash
        ;;

    down)
        check_docker
        step "Stopping Ask.Dentist MVP services"
        dc down -v
        success "Services stopped and volumes cleaned"
        ;;

    run-patient)
        step "Starting Patient Flutter App"
        cd "$ROOT/apps/patient"
        exec ./run.sh
        ;;

    run-doctor)
        step "Starting Doctor Flutter App"
        cd "$ROOT/apps/doctor"
        exec ./run.sh
        ;;

    doctor-logs)
        check_docker
        step "Following Laravel logs"
        dc exec php-fpm bash -c 'tail -f storage/logs/laravel.log' || {
            warn "Laravel log file not found, showing container logs instead:"
            dc logs -f php-fpm
        }
        ;;

    fix)
        step "Running diagnostics and suggesting fixes"

        echo "üîç System Status:"
        echo "‚Ä¢ Docker status:"
        if docker info >/dev/null 2>&1; then
            success "  ‚úÖ Docker is running"
        else
            warn "  ‚ùå Docker is not running - please start Docker Desktop"
        fi

        echo "‚Ä¢ Container status:"
        dc ps

        echo "‚Ä¢ PHP status:"
        if dc exec -T php-fpm php -v >/dev/null 2>&1; then
            success "  ‚úÖ PHP is working"
            dc exec -T php-fpm php -v | head -n 1
        else
            warn "  ‚ùå PHP container not responding"
        fi

        echo "‚Ä¢ Laravel status:"
        if dc exec -T php-fpm php artisan --version >/dev/null 2>&1; then
            success "  ‚úÖ Laravel is working"
            dc exec -T php-fpm php artisan --version
        else
            warn "  ‚ùå Laravel not responding"
        fi

        echo "‚Ä¢ Database status:"
        if dc exec -T php-fpm php artisan migrate:status >/dev/null 2>&1; then
            success "  ‚úÖ Database is connected"
        else
            warn "  ‚ùå Database connection failed"
        fi

        echo ""
        info "üîß Common Fixes:"
        echo "‚Ä¢ APP_KEY missing:"
        echo "  ./bin/dev shell"
        echo "  php artisan key:generate"
        echo ""
        echo "‚Ä¢ Database connection issues:"
        echo "  Check .env DB_HOST=postgres DB_PORT=5432"
        echo "  Wait for PostgreSQL: scripts/wait-for.sh 127.0.0.1 5432 60"
        echo "  Then run: php artisan migrate"
        echo ""
        echo "‚Ä¢ 500 errors on admin/doctor portals:"
        echo "  Check storage permissions:"
        echo "  docker compose exec php-fpm chown -R www-data:www-data storage bootstrap/cache"
        echo ""
        echo "‚Ä¢ 419 CSRF errors:"
        echo "  Clear browser cookies or check APP_URL in .env matches localhost:8080"
        echo ""
        echo "‚Ä¢ Flutter app issues:"
        echo "  flutter clean && flutter pub get"
        echo "  Check Flutter doctor: flutter doctor"
        ;;

    test)
        check_docker
        step "Running Laravel tests"
        dc exec -T php-fpm php artisan test
        ;;

    reset)
        check_docker
        step "Resetting development environment"
        dc down -v
        dc up -d
        scripts/wait-for.sh 127.0.0.1 5432 60
        dc exec -T php-fpm php artisan migrate:fresh --seed --force
        success "Environment reset complete"
        ;;

    ip)
        local lan_ip=$(get_lan_ip)
        echo "üåê Network Information:"
        if [ -n "$lan_ip" ]; then
            echo "  LAN IP: $lan_ip"
        else
            echo "  LAN IP: Unable to detect"
        fi
        print_api_urls
        ;;

    health)
        step "Testing API health endpoint"
        if curl -sSf http://localhost:8080/api/health >/dev/null 2>&1; then
            echo ""
            success "‚úÖ API health check passed"
            curl -s http://localhost:8080/api/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost:8080/api/health
        else
            warn "‚ùå API health check failed"
            echo "Make sure the backend is running: ./bin/dev up"
        fi
        ;;

    logs-patient)
        step "Following Patient App logs"
        if [ -f "$ROOT/apps/patient/logs/flutter.log" ]; then
            tail -f "$ROOT/apps/patient/logs/flutter.log"
        else
            warn "Patient app logs not found. Start the app first: ./bin/dev run-patient"
        fi
        ;;

    fix-network)
        step "Diagnosing network connectivity issues"

        echo "üîç Network Diagnostics:"

        # Test localhost connectivity
        if curl -sSf http://localhost:8080/api/health >/dev/null 2>&1; then
            success "  ‚úÖ localhost:8080 is reachable"
        else
            warn "  ‚ùå localhost:8080 is not reachable"
        fi

        # Test 10.0.2.2 (Android emulator)
        if curl -sSf http://10.0.2.2:8080/api/health >/dev/null 2>&1; then
            success "  ‚úÖ 10.0.2.2:8080 is reachable (Android emulator)"
        else
            warn "  ‚ùå 10.0.2.2:8080 is not reachable (Android emulator)"
        fi

        # Test LAN IP
        local lan_ip=$(get_lan_ip)
        if [ -n "$lan_ip" ]; then
            if curl -sSf "http://$lan_ip:8080/api/health" >/dev/null 2>&1; then
                success "  ‚úÖ $lan_ip:8080 is reachable (physical device)"
            else
                warn "  ‚ùå $lan_ip:8080 is not reachable (physical device)"
            fi
        fi

        echo ""
        step "Checking CORS configuration"
        dc exec -T php-fpm php artisan config:clear
        dc exec -T php-fpm php artisan optimize:clear
        success "Backend cache cleared"

        print_api_urls
        ;;

    help|*)
        echo "Ask.Dentist MVP Developer Orchestrator"
        echo "====================================="
        echo ""
        echo "üöÄ Environment Management:"
        echo "  up              Start all services with full Laravel setup"
        echo "  down            Stop all services and clean volumes"
        echo "  reset           Reset environment (fresh database)"
        echo ""
        echo "üîç Monitoring & Debugging:"
        echo "  logs            Follow logs with intelligent error detection"
        echo "  logs-all        Follow all logs (unfiltered)"
        echo "  logs-patient    Follow patient app logs"
        echo "  smoke           Run API health checks"
        echo "  doctor-logs     Follow Laravel application logs"
        echo "  fix             Run diagnostics and show common fixes"
        echo "  fix-network     Diagnose network connectivity issues"
        echo ""
        echo "üåê Network & API:"
        echo "  ip              Show LAN IP and platform-specific URLs"
        echo "  health          Test API health endpoint"
        echo ""
        echo "üîß Quick Access:"
        echo "  admin           Show admin credentials and open portal"
        echo "  doctor          Show doctor credentials and open portal"
        echo "  shell           Open PHP container shell"
        echo ""
        echo "üì± Flutter Apps:"
        echo "  run-patient     Start patient Flutter app"
        echo "  run-doctor      Start doctor Flutter app"
        echo ""
        echo "üß™ Testing:"
        echo "  test            Run Laravel tests"
        echo ""
        echo "Examples:"
        echo "  ./bin/dev up              # Start everything"
        echo "  ./bin/dev ip              # Show network info for mobile"
        echo "  ./bin/dev health          # Test API connectivity"
        echo "  ./bin/dev fix-network     # Diagnose mobile connectivity"
        echo "  ./bin/dev admin           # Open admin portal"
        echo "  ./bin/dev run-patient     # Start patient app"
        echo ""
        ;;
esac
